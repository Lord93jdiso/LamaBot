import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from dotenv import load_dotenv
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_KEY = os.getenv('OPENROUTER_API_KEY')

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
MODELS = {
    "gpt-3.5-turbo": "OpenAI ChatGPT",
    "claude-3-sonnet": "Anthropic Claude",
    "llama3-70b": "Meta Llama 3"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üß† *–ù–µ–π—Ä–æ-–±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"
        + "\n".join([f"- {name} (`{key}`)" for key, name in MODELS.items()]) +
        "\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!"
    )
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
        model = "gpt-3.5-turbo"
        
        # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API
        headers = {
            "Authorization": f"Bearer {OPENROUTER_KEY}",
            "HTTP-Referer": "https://github.com",
            "X-Title": "NeuroBot"
        }
        
        data = {
            "model": model,
            "messages": [{"role": "user", "content": user_text}],
            "temperature": 0.7
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        response.raise_for_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        ai_response = response.json()['choices'][0]['message']['content']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–±—Ä–µ–∑–∞–µ–º –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)
        await update.message.reply_text(ai_response[:4000])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
